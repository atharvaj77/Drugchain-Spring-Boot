package com.atharvaj77.drugchain;

import com.smartcontract.drugchain.Contract;
import org.springframework.stereotype.Service;
import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.RawTransaction;
import org.web3j.crypto.TransactionEncoder;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.response.EthGetTransactionCount;
import org.web3j.protocol.core.methods.response.EthSendTransaction;
import org.web3j.protocol.http.HttpService;
import org.web3j.utils.Numeric;
import org.web3j.abi.TypeReference;

import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@Service
public class BlockchainService {

    private final Web3j web3j;
    private final Credentials credentials;
    private final Contract contract;
    private final String contractAddress = "0x1Fe7259b859a93D4c58976184d00b19057107A97"; // Replace `YourContract` with the actual contract wrapper generated by Web3j

    public BlockchainService() {
        String ganacheUrl = "https://alien-icy-forest.matic-testnet.discover.quiknode.pro/aa4b4f44bf12c648d08b978b716b60223d26486e/";
        web3j = Web3j.build(new HttpService(ganacheUrl));
        credentials = Credentials.create("YOUR_PRIVATE_KEY"); // Replace `YOUR_PRIVATE_KEY` with your actual private key

        contract = Contract.load(
                "0x1Fe7259b859a93D4c58976184d00b19057107A97",
                web3j,
                credentials,
                BigInteger.valueOf(1000000),
                BigInteger.valueOf(3000000)
        );
    }

    public String createProduct(String itemName, String mfgDate, String expiryDate,
                                String batchNo, BigInteger numberUnits, String history,
                                String fromAdd, String toAdd) throws IOException {
        BigInteger nonce = getNonce(fromAdd);

        RawTransaction rawTransaction = RawTransaction.createTransaction(
                nonce,
                BigInteger.valueOf(1000000),
                BigInteger.valueOf(3000000),
                contractAddress,
                contract.createProduct(
                        itemName,
                        mfgDate,
                        expiryDate,
                        batchNo,
                        numberUnits,
                        Arrays.toString(history.getBytes(StandardCharsets.UTF_8)),
                        BigInteger.valueOf(-1),
                        fromAdd,
                        toAdd
                ).encodeFunctionCall()
        );

        byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);
        String hexValue = Numeric.toHexString(signedMessage);

        EthSendTransaction ethSendTransaction = web3j.ethSendRawTransaction(hexValue).send();
        return ethSendTransaction.getTransactionHash();
    }

    public void updateHistory(BigInteger pid, String hist, String addFrom) throws IOException {
        BigInteger nonce = getNonce(addFrom).add(BigInteger.ONE);

        RawTransaction rawTransaction = RawTransaction.createTransaction(
                nonce,
                BigInteger.valueOf(1000000),
                BigInteger.valueOf(3000000),
                contractAddress,
                contract.updateHistory(pid, hist).encodeFunctionCall()
        );

        byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);
        String hexValue = Numeric.toHexString(signedMessage);

        web3j.ethSendRawTransaction(hexValue).send();
    }

    // Other functions and methods omitted for brevity

    public List getAllProducts(String pid) throws Exception {
        return contract.findProduct(pid).send();
    }

    public Contract.Product getProduct(BigInteger productId) throws Exception {
        return contract.getProductDetails(productId).send();
    }

    public BigInteger getLastProductId(String address) throws Exception {
        return contract.getLastProductId(address).send();
    }

    private BigInteger getNonce(String address) throws IOException {
        EthGetTransactionCount transactionCount = web3j.ethGetTransactionCount(
                address,
                DefaultBlockParameterName.LATEST
        ).send();

        return transactionCount.getTransactionCount();
    }
}
